// This file was generated by counterfeiter
package processfakes

import (
	"sync"

	"github.com/pivotal-cf/cf-redis-broker/process"
)

type FakeFinderProvider struct {
	NewProcessStub        func(int) (process.ProcessFinder, error)
	newProcessMutex       sync.RWMutex
	newProcessArgsForCall []struct {
		arg1 int
	}
	newProcessReturns struct {
		result1 process.ProcessFinder
		result2 error
	}
}

func (fake *FakeFinderProvider) NewProcess(arg1 int) (process.ProcessFinder, error) {
	fake.newProcessMutex.Lock()
	fake.newProcessArgsForCall = append(fake.newProcessArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.newProcessMutex.Unlock()
	if fake.NewProcessStub != nil {
		return fake.NewProcessStub(arg1)
	} else {
		return fake.newProcessReturns.result1, fake.newProcessReturns.result2
	}
}

func (fake *FakeFinderProvider) NewProcessCallCount() int {
	fake.newProcessMutex.RLock()
	defer fake.newProcessMutex.RUnlock()
	return len(fake.newProcessArgsForCall)
}

func (fake *FakeFinderProvider) NewProcessArgsForCall(i int) int {
	fake.newProcessMutex.RLock()
	defer fake.newProcessMutex.RUnlock()
	return fake.newProcessArgsForCall[i].arg1
}

func (fake *FakeFinderProvider) NewProcessReturns(result1 process.ProcessFinder, result2 error) {
	fake.NewProcessStub = nil
	fake.newProcessReturns = struct {
		result1 process.ProcessFinder
		result2 error
	}{result1, result2}
}

var _ process.FinderProvider = new(FakeFinderProvider)

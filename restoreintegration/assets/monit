#!/usr/bin/env ruby

#
# Fake monit for testing purposes
#
# Writes commands to $MONIT_LOG_FILE
# Uses log file modification time to simulate monit slowness
#
# Takes 10 seconds to "start" a process and 1 second to "stop it"
#
# Use TIME_SPEEDUP_MULTIPLIER to make tests faster
#

TIME_SPEEDUP_MULTIPLIER = 10

unless ARGV.length == 1 or ARGV.length == 2
  fail("Usage: monit <start/stop> process-watcher; monit summary")
end

action = ARGV.fetch(0)
unless %w{stop start summary}.include? action
  fail("Unknown action: #{action}. Must be `start`, `stop` or `summary`.")
end

def log(str)
  log_file = ENV.fetch('MONIT_LOG_FILE')
  open(ENV['MONIT_LOG_FILE'], 'a') do |f|
    f.puts str
  end
end

def read()
  path = ENV.fetch('MONIT_LOG_FILE')
  if File.exists?(path)
    File.read(path)
  else
    ''
  end
end

def time_since_modified()
  Time.now - File.mtime(ENV.fetch('MONIT_LOG_FILE'))
end

def summary_output(status)
  "\nThe Monit daemon 5.2.4 uptime: 3m \n\nProcess 'process-watcher'           #{status}\nProcess 'cf-redis-broker'           running\nProcess 'broker-nginx'              running\nSystem 'system_2b19201b-fc5e-4c3a-b5c8-d75e131064e8' running\n\n"
end

if action == 'start'
  log "starting process-watcher"
elsif action == "stop"
  log "stopping process-watcher"
elsif action == "summary"

  # search log file for last instance of stopping or starting process
  matches = read().scan /^(starting|stopping)/
  if matches.length > 0
    last_action = matches.last[0]
  else
    last_action = 'none'
  end

  case last_action
  when 'none'
    puts summary_output("running")
  when 'stopping'
    if time_since_modified() > 1.0 / TIME_SPEEDUP_MULTIPLIER
      puts summary_output("not monitored")
    else
      puts summary_output("not monitored - stop pending")
    end
  when 'starting'
    if time_since_modified() > 10.0 / TIME_SPEEDUP_MULTIPLIER
      puts summary_output("running")
    elsif time_since_modified() > 1.0 / TIME_SPEEDUP_MULTIPLIER
      puts summary_output("initializing")
    else
      puts summary_output("not monitored - start pending")
    end
  else
    fail "Couldn't parse fake monit log file"
  end
end
